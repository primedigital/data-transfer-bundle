parameters:
    # Siteaccess to fetch database config from
    data_transfer_bundle.siteaccess: ez_demobundle

    # Remote host to connect to via ssh
    data_transfer_bundle.remote.host: remote.host.com

    # Remote username to connect to via ssh
    data_transfer_bundle.remote.user: root

    # Environment running on the remote host. Leave empty to use default
    data_transfer_bundle.remote.env: ~

    # Remote dir root of the symfony/ezpublish installation. Can be absolute or relative to the home folder. Do not
    # add a trailing slash.
    data_transfer_bundle.remote.dir: /var/www/ezpublish

    # How to call the console script on the remote system from within the remote.dir (specified above)
    data_transfer_bundle.console_script: php ezpublish/console

    # Specify a list of folders to be synced from remote host to local host. Folder must be relative to the symfony
    # root and must not end with a trailing slash.
    # You can use either a list of folders or key value pairs, if folders must be renamed
    data_transfer_bundle.folders:
        # Your legacy storage folder is a good example
        - ezpublish_legacy/var/ezdemo_site/storage
        # Alternate notation, does the same
        # ezpublish_legacy/var/ezdemo_site/storage: ezpublish_legacy/var/ezdemo_site/

    # Add a list of options to be used, when connecting via ssh.
    data_transfer_bundle.ssh.options:
        # Disable asking of host authenticity
        - -o StrictHostKeyChecking=no
        # Use own ssh key
        #- -i ~/.ssh/id_rsa_server

    # These options are required, if a ssh connection must be tunneled trough another ssh connection
    data_transfer_bundle.ssh.proxy.host: ~
    data_transfer_bundle.ssh.proxy.user: ~
    # See options above
    data_transfer_bundle.ssh.proxy.options: [-o StrictHostKeyChecking=no]

    # Command line options for rsyncing files
    data_transfer_bundle.rsync.options:
        # Enable verbosity
        - -v
        # Use checksum to only transfer changed files
        - --checksum
        # This avoids some permission problems
        - --omit-dir-times
        # Transfer files compressed
        - --compress
        # Transfer recursive
        - --recursive
        # copy symlinks as symlinks
        - --links
        # Keep exec flag
        - --executability
        # Delete removed files after the transfer
        - --delete-after

    # Fetch Database via sql file, not via stdout. This scales better for large databases
    data_transfer_bundle.db_via_file: true

    # Additional mysql arguments for DB import, e.g. '--compress'
    # Can be a single string or an array of argument
    data_transfer_bundle.database.import_arguments: ~

    # Additional mysqldump arguments for DB export, e.g. '--disable-keys'
    # Can be a single string or an array of argument
    data_transfer_bundle.database.export_arguments: ~
